# -*- coding: utf-8 -*-
# Copyright (C) 2020 Greenbone Networks GmbH
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import subprocess
import sys

from pathlib import Path

from gvm import get_version
from gvm.utils import safe_version, get_version_from_pyproject_toml


def strip_version(version: str) -> str:
    if version and version[0] == 'v':
        return version[1:]

    return version


def verfiy(args):
    pyproject_version = get_version_from_pyproject_toml()
    version = get_version()

    if version != safe_version(version):
        sys.exit("The version in gvm/__version__.py is not PEP 440 compliant.")

    if pyproject_version != version:
        sys.exit(
            "The version set in the pyproject.toml file \"{}\" doesn't match "
            " the python-gvm version \"{}\"".format(pyproject_version, version)
        )

    if args.version != 'current':
        provided_version = strip_version(args.version)
        if provided_version != version:
            sys.exit(
                "Provided version \"{}\" does not match the python-gvm "
                "version \"{}\"".format(provided_version, version)
            )


def show(_args):
    pyproject_version = safe_version(get_version_from_pyproject_toml())
    print(pyproject_version)


def update(args):
    version = safe_version(args.version)
    python_gvm_version = get_version()
    pyproject_version = get_version_from_pyproject_toml()

    if not args.force and python_gvm_version == version:
        print('Version is already up-to-date.')
        sys.exit(0)

    try:
        subprocess.check_call(
            ['poetry', 'version', version],
            timeout=120,  # wait 2 min and don't wait forever
        )
    except subprocess.SubprocessError as e:
        sys.exit(e)

    version_file_path = Path('gvm/__version__.py')
    text = """# pylint: disable=invalid-name

# THIS IS AN AUTOGENERATED FILE. DO NOT TOUCH!

__version__ = "{}"
    """.format(
        version
    )
    version_file_path.write_text(text)

    print('Updated version from {} to {}'.format(pyproject_version, version))

    sys.exit(0)


def main():
    parser = argparse.ArgumentParser(description='Version handling utilities.')

    subparsers = parser.add_subparsers(
        title='subcommands',
        description='valid subcommands',
        help='additional help',
    )

    verify_parser = subparsers.add_parser('verify')
    verify_parser.add_argument('version', help='version string to compare')
    verify_parser.set_defaults(func=verfiy)

    show_parser = subparsers.add_parser('show')
    show_parser.set_defaults(func=show)

    update_parser = subparsers.add_parser('update')
    update_parser.add_argument('version', help='version string to use')
    update_parser.add_argument(
        '--force',
        help="don't check if version is already set",
        action="store_true",
    )
    update_parser.set_defaults(func=update)

    args = parser.parse_args()
    args.func(args)


if __name__ == '__main__':
    main()
