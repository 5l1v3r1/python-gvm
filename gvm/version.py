# -*- coding: utf-8 -*-
# Copyright (C) 2020 Greenbone Networks GmbH
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import re
import subprocess
import sys

from pathlib import Path

import toml

from packaging.version import Version, InvalidVersion


from gvm import get_version


def strip_version(version: str) -> str:
    if version and version[0] == 'v':
        return version[1:]

    return version


def safe_version(version: str) -> str:
    """
    Returns the version as a string in `PEP440`_ compliant
    format.

    .. _PEP440:
       https://www.python.org/dev/peps/pep-0440
    """
    try:
        return str(Version(version))
    except InvalidVersion:
        version = version.replace(' ', '.')
        return re.sub('[^A-Za-z0-9.]+', '-', version)


def get_version_from_pyproject_toml() -> str:
    """
    Return the version information from the [tool.poetry] section of the
    pyproject.toml file. The version may be in non standardized form.
    """
    path = Path(__file__)
    pyproject_toml_path = path.parent.parent / 'pyproject.toml'

    if not pyproject_toml_path.exists():
        raise RuntimeError('pyproject.toml file not found.')

    pyproject_toml = toml.loads(pyproject_toml_path.read_text())
    if 'tool' in pyproject_toml and 'poetry' in pyproject_toml['tool']:
        return pyproject_toml['tool']['poetry']['version']

    raise RuntimeError('Version information not found in pyproject.toml file.')


def get_version_string(version: tuple) -> str:
    """Create a version string from a version tuple

    Arguments:
        version: version as tuple e.g. (1, 2, 0, dev, 5)

    Returns:
        The version tuple converted into a string representation
    """
    if len(version) > 4:
        ver = ".".join(str(x) for x in version[:4])
        ver += str(version[4])

        if len(version) > 5:
            # support (1, 2, 3, 'beta', 2, 'dev', 1)
            ver += ".{0}{1}".format(str(version[5]), str(version[6]))

        return ver
    else:
        return ".".join(str(x) for x in version)


def verfiy(args):
    pyproject_version = get_version_from_pyproject_toml()
    version = get_version()

    if version != safe_version(version):
        sys.exit("The version in gvm/__version__.py is not PEP 440 compliant.")

    if pyproject_version != version:
        sys.exit(
            "The version set in the pyproject.toml file \"{}\" doesn't match "
            " the python-gvm version \"{}\"".format(pyproject_version, version)
        )

    if args.version != 'current':
        provided_version = strip_version(args.version)
        if provided_version != version:
            sys.exit(
                "Provided version \"{}\" does not match the python-gvm "
                "version \"{}\"".format(provided_version, version)
            )

    print('OK')


def show(_args):
    pyproject_version = safe_version(get_version_from_pyproject_toml())
    print(pyproject_version)


def update(args):
    version = safe_version(args.version)
    python_gvm_version = get_version()
    pyproject_version = get_version_from_pyproject_toml()

    if not args.force and python_gvm_version == version:
        print('Version is already up-to-date.')
        sys.exit(0)

    try:
        subprocess.check_call(
            ['poetry', 'version', version],
            timeout=120,  # wait 2 min and don't wait forever
        )
    except subprocess.SubprocessError as e:
        sys.exit(e)

    version_file_path = Path('gvm/__version__.py')
    text = """# pylint: disable=invalid-name

# THIS IS AN AUTOGENERATED FILE. DO NOT TOUCH!

__version__ = "{}"
    """.format(
        version
    )
    version_file_path.write_text(text)

    print('Updated version from {} to {}'.format(pyproject_version, version))

    sys.exit(0)


def main():
    parser = argparse.ArgumentParser(description='Version handling utilities.')

    subparsers = parser.add_subparsers(
        title='subcommands',
        description='valid subcommands',
        help='additional help',
    )

    verify_parser = subparsers.add_parser('verify')
    verify_parser.add_argument('version', help='version string to compare')
    verify_parser.set_defaults(func=verfiy)

    show_parser = subparsers.add_parser('show')
    show_parser.set_defaults(func=show)

    update_parser = subparsers.add_parser('update')
    update_parser.add_argument('version', help='version string to use')
    update_parser.add_argument(
        '--force',
        help="don't check if version is already set",
        action="store_true",
    )
    update_parser.set_defaults(func=update)

    args = parser.parse_args()

    if not hasattr(args, 'func'):
        parser.print_usage()
        sys.exit(0)

    args.func(args)


if __name__ == '__main__':
    main()
